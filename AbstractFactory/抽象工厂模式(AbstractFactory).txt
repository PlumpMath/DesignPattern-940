二、抽象工厂模式（AbstractFactory）
	抽象工厂（Abstract Factory）模式意图：为创建一组相关或相互依赖对象提供了一个接口，而且无需指定它们的具体类。
	抽象工厂可以向客户提供一个接口，是客户可以在不必指定产品具体类型的情况下，创建多个产品家族中的产品对象，它强调的“系列对象”的变化。


简单工厂模式参与者：
	AbstractFactory：声明一个创建抽象产品对象的操作接口
	ConcreteFactory：实现创建具体产品对象的操作
   	AbstractProduct：声明一类产品对象接口
	Product：定义一个被相应具体工厂创建的产品对象，实现AbstractProduct接口
	在抽象工厂模式中，产品的创建由ConcreteFactory来完成，抽象工厂模式的ConcreteFactory不是负责一种具体Product的创建，而是负责一个Product族的创建。

简单工厂模式的优点
	抽象工厂模式最主要的优点就是可以在类的内部对产品族进行约束。
	所谓的产品族，一般或多或少的都存在一定的关联，抽象工厂模式就可以在类内部对产品族的关联关系进行定义和描述，而不必专门引入一个新的类来进行管理。
 
简单工厂模式的缺点
	产品族的扩展将是一件十分费力的事情，假如产品族中需要增加一个新的产品，则几乎所有的工厂类都需要进行修改。所以使用抽象工厂模式时，对产品等级结构的划分是非常重要的。


适用场景
	当需要创建的对象是一系列相互关联或相互依赖的产品族时，便可以使用抽象工厂模式。说的更明白一点，就是一个继承体系中，如果存在着多个等级结构（即存在着多个抽象类），并且分属各个等级结构中的实现类之间存在着一定的关联或者约束，就可以使用抽象工厂模式。假如各个等级结构中的实现类之间不存在关联或约束，则使用多个独立的工厂来对产品进行创建，则更合适一点。